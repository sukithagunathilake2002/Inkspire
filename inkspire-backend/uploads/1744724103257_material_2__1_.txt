REM   Script: DS Lab7
REM   IT22212054
REM   Name- Jayasekera j. d .c . n


rem  
rem $Header: utlxplan.sql 05-may-2000.17:08:39 ddas Exp $ xplainpl.sql  
rem  
Rem Copyright (c) 1988, 1995, 1996, 1998, 2000 by Oracle Corporation 
Rem NAME 
REM    UTLXPLAN.SQL 
Rem  FUNCTION 
Rem  NOTES 
Rem  MODIFIED 
Rem     ddas       05/05/00  - increase length of options column 
Rem     ddas       04/17/00  - add CPU, I/O cost, temp_space columns 
Rem     mzait      02/19/98 -  add distribution method column 
Rem     ddas       05/17/96 -  change search_columns to number 
Rem     achaudhr   07/23/95 -  PTI: Add columns partition_{start, stop, id} 
Rem     glumpkin   08/25/94 -  new optimizer fields 
Rem     jcohen     11/05/93 -  merge changes from branch 1.1.710.1 - 9/24 
Rem     jcohen     09/24/93 - #163783 add optimizer column 
Rem     glumpkin   10/25/92 -  Renamed from XPLAINPL.SQL  
Rem     jcohen     05/22/92 - #79645 - set node width to 128 (M_XDBI in gendef) 
Rem     rlim       04/29/91 -         change char to varchar2  
Rem   Peeler     10/19/88 - Creation 
Rem 
Rem This is the format for the table that is used by the EXPLAIN PLAN 
Rem statement.  The explain statement requires the presence of this  
Rem table in order to store the descriptions of the row sources. 


create table PLAN_TABLE ( 
	statement_id 	varchar2(30), 
	timestamp    	date, 
	remarks      	varchar2(80), 
	operation    	varchar2(30), 
	options       	varchar2(255), 
	object_node  	varchar2(128), 
	object_owner 	varchar2(30), 
	object_name  	varchar2(30), 
	object_instance numeric, 
	object_type     varchar2(30), 
	optimizer       varchar2(255), 
	search_columns  number, 
	id		numeric, 
	parent_id	numeric, 
	position	numeric, 
	cost		numeric, 
	cardinality	numeric, 
	bytes		numeric, 
	other_tag       varchar2(255), 
	partition_start varchar2(255), 
        partition_stop  varchar2(255), 
        partition_id    numeric, 
	other		long, 
	distribution    varchar2(30), 
	cpu_cost	numeric, 
	io_cost		numeric, 
	temp_space	numeric);


drop table client;
drop table stock;
drop table trading;
drop table purch;

Create table client (clno char(3), name varchar(12), address varchar(30), primary key(clno));
Create table stock (company char(7), price number(6,2), dividend number(4,2), eps  
number(4,2), primary key(company));
Create table trading(company char(7), exchange varchar(12), primary key(company,  
exchange), foreign key(company) references stock);
Create table purch (clno char(3), company char(7), pdate date, qty number(6), price  
number(6,2), primary key(clno, company, pdate), foreign key(clno) references client, foreign  
key(company) references stock);


Insert into client values ('c01', 'John Smith', '3 East Av, Bentley, WA 6102');
Insert into client values ('c02', 'Jill Brody', '42 Bent St, Perth, WA 6001');
Insert into stock values ('BHP', 10.5, 1.5, 3.2);
Insert into stock values ('INFOSYS', 45, 3, 7.8);
Insert into stock values ('IBM', 70.0, 4.25, 10.0);
Insert into stock values ('INTEL', 76.5, 5, 12.4);
Insert into stock values ('FORD', 40, 2, 8.5);
Insert into stock values ('GM', 60, 2.5, 9.2);

Insert into trading values ('BHP', 'Sydney');
Insert into trading values ('BHP', 'New York');
Insert into trading values ('IBM', 'New York');
Insert into trading values ('GM', 'New York');
Insert into trading values ('IBM', 'London');
Insert into trading values ('IBM', 'Tokyo');
Insert into trading values ('INTEL', 'New York');
Insert into trading values ('INFOSYS', 'New York');
Insert into trading values ('INTEL', 'London');
Insert into trading values ('FORD', 'New York');

Insert into purch values ('c01', 'BHP', '02-OCT-2001', 1000,12);
Insert into purch values ('c01', 'BHP', '08-JUN-2002', 2000, 10.50);
Insert into purch values ('c01', 'IBM', '12-FEB-2000', 500, 58);
Insert into purch values ('c01', 'IBM', '10-APR-2001', 1200, 65);
Insert into purch values ('c01', 'INFOSYS', '11-AUG-2001', 1000, 64);
Insert into purch values ('c02', 'INTEL', '30-JAN-2000', 300, 35);
Insert into purch values ('c02', 'INTEL', '30-JAN-2001', 400, 54);
Insert into purch values ('c02', 'INTEL', '02-OCT-2001', 200, 60);
Insert into purch values ('c02', 'FORD', '05-OCT-1999', 300, 40);
Insert into purch values ('c02', 'GM', '12-DEC-2000', 500, 55.5);


SELECT c.clno, c.name 
FROM Client c 
JOIN Purch p ON c.clno = p.clno 
WHERE p.qty > 1000;


ALTER SESSION SET OPTIMIZER_MODE = ALL_ROWS;
ALTER SESSION SET "_optimizer_cost_model"=CPU;


explain plan for 
select c.clno, c.name 
from client c, purch p 
where c.clno = p.clno and p.qty > 1000



select '| Operation and options            |  Object  | cost     | cpu_cost | io_cost  |' as "Plan Table" from dual 
union all 
select '--------------------------------------------------------------------------------' from dual 
union all 
select * from 
(select 
       rpad('| '||substr(lpad(' ',1*(level-1))||operation|| 
            decode(options, null,'',' '||options), 1, 35), 35, ' ')||'|'|| 
       rpad(substr(object_name||' ',1, 9), 10, ' ')||'| ' || 
       cast(cost as char(9)) ||'|' ||  
       cast(cpu_cost as char(10)) ||'| ' || 
       cast(io_cost as char(9))||'|'  
        as "Explain plan" 
from plan_table 
start with id=0 and timestamp = (select max(timestamp) from plan_table 
                                 where id=0) 
connect by prior id = parent_id 
        and prior nvl(statement_id, ' ') = nvl(statement_id, ' ') 
        and prior timestamp <= timestamp 
order by id, position) 
union all 
select '--------------------------------------------------------------------------------' from dual ;


--Unclustered B + -Tree index on purchase (qty, clno)
CREATE INDEX idx_purchase_qty_clno ON purch(qty, clno);

--Unclustered B+ Tree Index on client (clno, name)
CREATE INDEX idx_client_clno_name ON client(clno, name);



select index_name 
from user_indexes 
where table_name = 'CLIENT';

select DBMS_METADATA.GET_DDL('INDEX',u.index_name) 
from user_indexes u 
where table_name = 'CLIENT';

